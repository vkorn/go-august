// Code generated by "enumer -type=LockStatuses -transform=snake -trimprefix=Lock -json -text -yaml"; DO NOT EDIT.

//
package august

import (
	"encoding/json"
	"fmt"
)

const _LockStatusesName = "unknownunlockedlocked"

var _LockStatusesIndex = [...]uint8{0, 7, 15, 21}

func (i LockStatuses) String() string {
	if i < 0 || i >= LockStatuses(len(_LockStatusesIndex)-1) {
		return fmt.Sprintf("LockStatuses(%d)", i)
	}
	return _LockStatusesName[_LockStatusesIndex[i]:_LockStatusesIndex[i+1]]
}

var _LockStatusesValues = []LockStatuses{0, 1, 2}

var _LockStatusesNameToValueMap = map[string]LockStatuses{
	_LockStatusesName[0:7]:   0,
	_LockStatusesName[7:15]:  1,
	_LockStatusesName[15:21]: 2,
}

// LockStatusesString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LockStatusesString(s string) (LockStatuses, error) {
	if val, ok := _LockStatusesNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LockStatuses values", s)
}

// LockStatusesValues returns all values of the enum
func LockStatusesValues() []LockStatuses {
	return _LockStatusesValues
}

// IsALockStatuses returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LockStatuses) IsALockStatuses() bool {
	for _, v := range _LockStatusesValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LockStatuses
func (i LockStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LockStatuses
func (i *LockStatuses) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LockStatuses should be a string, got %s", data)
	}

	var err error
	*i, err = LockStatusesString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for LockStatuses
func (i LockStatuses) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LockStatuses
func (i *LockStatuses) UnmarshalText(text []byte) error {
	var err error
	*i, err = LockStatusesString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for LockStatuses
func (i LockStatuses) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for LockStatuses
func (i *LockStatuses) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LockStatusesString(s)
	return err
}
